{"version":3,"sources":["hooks/useWordle.js","components/Row.js","components/Grid.js","components/Keypad.js","components/Modal.js","components/Wordle.js","App.js","reportWebVitals.js","index.js"],"names":["useWordle","solution","turn","setTurn","useState","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","handleKeyup","_ref","key","console","log","includes","length","formatted","formatGuess","solutionArray","formattedGuess","map","l","color","forEach","i","indexOf","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","currentColor","test","prev","slice","Row","guess","React","createElement","className","letters","split","letter","_","Grid","g","Keypad","setLetters","useEffect","fetch","then","res","json","Modal","Wordle","showModal","setShowModal","window","addEventListener","setTimeout","removeEventListener","App","setSolution","randomSolution","Math","floor","random","word","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4cdce7dc.chunk.js","sourcesContent":["import { useState } from 'react'\r\n\r\nconst useWordle = (solution) => {\r\n  const [turn, setTurn] = useState(0) \r\n  const [currentGuess, setCurrentGuess] = useState('')\r\n  const [guesses, setGuesses] = useState([...Array(6)]) \r\n  const [history, setHistory] = useState([]) \r\n  const [isCorrect, setIsCorrect] = useState(false)\r\n  const [usedKeys, setUsedKeys] = useState({})\r\n\r\n\r\n  const formatGuess = () => {\r\n    let solutionArray = [...solution]\r\n    let formattedGuess = [...currentGuess].map((l) => {\r\n        return {key:l, color:'grey'}\r\n    })\r\n    //find any green colors now\r\n    formattedGuess.forEach((l,i) =>{\r\n        if (solutionArray[i] === l.key){\r\n            formattedGuess[i].color = 'green'\r\n            solutionArray[i] = null\r\n        }\r\n    })\r\n    //do it again for yellow\r\n    formattedGuess.forEach((l, i) => {\r\n        if (solutionArray.includes(l.key) && l.color !== 'green'){\r\n            //checks if its included anywhere\r\n            formattedGuess[i].color = 'yellow'\r\n            solutionArray[solutionArray.indexOf(l.key)] = null\r\n        }\r\n    })\r\n    return formattedGuess\r\n  }\r\n  const addNewGuess = (formattedGuess) => {\r\n    if (currentGuess === solution) {\r\n        setIsCorrect(true)\r\n      }\r\n      setGuesses(prevGuesses => {\r\n        let newGuesses = [...prevGuesses]\r\n        newGuesses[turn] = formattedGuess\r\n        return newGuesses\r\n      })\r\n      setHistory(prevHistory => {\r\n        return [...prevHistory, currentGuess]\r\n      })\r\n      setTurn(prevTurn => {\r\n        return prevTurn + 1\r\n      })\r\n      setUsedKeys(prevUsedKeys => {\r\n        formattedGuess.forEach(l => {\r\n          const currentColor = prevUsedKeys[l.key]\r\n  \r\n          if (l.color === 'green') {\r\n            prevUsedKeys[l.key] = 'green'\r\n            return\r\n          }\r\n          if (l.color === 'yellow' && currentColor !== 'green') {\r\n            prevUsedKeys[l.key] = 'yellow'\r\n            return\r\n          }\r\n          if (l.color === 'grey' && currentColor !== ('green' || 'yellow')) {\r\n            prevUsedKeys[l.key] = 'grey'\r\n            return\r\n          }\r\n        })\r\n  \r\n        return prevUsedKeys\r\n      })\r\n    setCurrentGuess('')\r\n  }\r\n  const handleKeyup = ({ key }) => {\r\n\r\n    if(key === 'Enter'){\r\n        if(turn>5){\r\n            console.log('all guesses have been used')\r\n            return\r\n        }\r\n        if(history.includes(currentGuess)){\r\n            console.log('you tried that already!')\r\n            return\r\n        }\r\n        if(currentGuess.length !== 5){\r\n            console.log('must be 5 chars')\r\n            return\r\n        }\r\n        const formatted = formatGuess()\r\n        addNewGuess(formatted)\r\n    }\r\n\r\n    if(key === 'Backspace'){ //allows user to delete a character\r\n        setCurrentGuess((prev) => {\r\n            return prev.slice(0, -1) //returns a new string to us which is the old string minus the last character\r\n        })\r\n        return //doesnt go any further into the function\r\n    }\r\n    if (/^[A-Za-z]$/.test(key)) { //regex to make sure input is letter not like shift, etc\r\n        if(currentGuess.length < 5){ //5 is the max length of what u can enter\r\n            setCurrentGuess((prev) => { \r\n                return prev + key //return what ur typing plus what u had alr\r\n            })\r\n        }\r\n    } \r\n\r\n  }\r\n  return {turn, currentGuess, guesses, isCorrect, usedKeys, handleKeyup}\r\n}\r\n\r\nexport default useWordle","import React from 'react'\r\n\r\nexport default function Row({ guess, currentGuess }) {\r\n\r\n    if (guess) {\r\n        return (\r\n          <div className=\"row past\">\r\n            {guess.map((l, i) => (\r\n              <div key={i} className={l.color}>{l.key}</div>\r\n            ))}\r\n          </div>\r\n        )\r\n      }\r\n    \r\n      if (currentGuess) {\r\n        let letters = currentGuess.split('')\r\n    \r\n        return (\r\n          <div className=\"row current\">\r\n            {letters.map((letter, i) => (\r\n              <div key={i} className=\"filled\">{letter}</div>\r\n            ))}\r\n            {[...Array(5 - letters.length)].map((_,i) => (\r\n              <div key={i}></div>\r\n            ))}\r\n          </div>\r\n        )\r\n      }\r\n\r\n\r\n//undefined guess = empty row\r\n  return (\r\n    <div className=\"row\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Row from './Row'\r\n\r\nexport default function Grid({ currentGuess, guesses, turn}) {\r\n  return (\r\n    <div>\r\n        {guesses.map((g, i) =>{\r\n            if(turn === i){\r\n                return <Row key={i} currentGuess={currentGuess} />\r\n            }\r\n            return <Row key={i} guess={g}/>\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Keypad({ usedKeys }) {\r\n  const [letters, setLetters] = useState(null)\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3001/letters')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        setLetters(json)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"keypad\">\r\n      {letters && letters.map(l => {\r\n        const color = usedKeys[l.key]\r\n        return (\r\n          <div key={l.key} className={color}>{l.key}</div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Modal({ isCorrect, solution, turn }) {\r\n  return (\r\n    <div className=\"modal\">\r\n      {isCorrect && (\r\n        <div>\r\n          <h1>You Win!</h1>\r\n          <p className=\"solution\">{solution}</p>\r\n          <p>You found the solution in {turn} guesses :)</p>\r\n        </div>\r\n      )}\r\n      {!isCorrect && (\r\n        <div>\r\n          <h1>You lose!</h1>\r\n          <p className=\"solution\">The answer was {solution}</p>\r\n          <p>Better luck next time :)</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport useWordle from '../hooks/useWordle'\r\n\r\n// components\r\nimport Grid from './Grid'\r\nimport Keypad from './Keypad'\r\nimport Modal from './Modal'\r\n\r\nexport default function Wordle({ solution }) {\r\n  const { currentGuess, guesses, turn, isCorrect, usedKeys, handleKeyup } = useWordle(solution)\r\n  const [showModal, setShowModal] = useState(false)\r\n  \r\n  useEffect(() => {\r\n    window.addEventListener('keyup', handleKeyup)\r\n\r\n    if (isCorrect) {\r\n      setTimeout(() => setShowModal(true), 2000)\r\n      window.removeEventListener('keyup', handleKeyup)\r\n    }\r\n    if (turn > 5) {\r\n      setTimeout(() => setShowModal(true), 2000)\r\n      window.removeEventListener('keyup', handleKeyup)\r\n    }\r\n\r\n    return () => window.removeEventListener('keyup', handleKeyup)\r\n  }, [handleKeyup, isCorrect, turn])\r\n\r\n  return (\r\n    <div>\r\n      <Grid guesses={guesses} currentGuess={currentGuess} turn={turn} />\r\n      <Keypad usedKeys={usedKeys} />\r\n      {showModal && <Modal isCorrect={isCorrect} turn={turn} solution={solution} />}\r\n    </div>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport Wordle from './components/Wordle'\r\n\r\nfunction App() {\r\n  const [solution, setSolution] = useState(null)\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:3001/solutions')\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const randomSolution = json[Math.floor(Math.random()*json.length)]\r\n        setSolution(randomSolution.word)\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Wordle Clone</h1>\r\n      {solution && <Wordle solution={solution}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}